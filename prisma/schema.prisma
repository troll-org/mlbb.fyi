//dotenv -e .env.local -- prisma db push
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Emblem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  attribute String[]
  img       String
}

model Spell {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  desc    String
  img     String
  cd      String
  details String[]
  variant String[]
}

model Item {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  desc      String
  img       String
  category  String
  attribute String[]
}

model Hero {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  name    String       @unique
  img     String
  heroId  Int          @unique
  tier    String
  role    String[]
  stats   HeroStats
  details HeroDetails?
}

type HeroDetailsSkills {
  name        String
  icon        String
  description String
  tips        String
}

model HeroDetails {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  heroId         String              @unique @db.ObjectId
  heroType       String
  heroName       String
  coverPicture   String
  galleryPicture String
  ability        String
  offense        String
  durability     String
  difficulty     String
  skill          HeroDetailsSkills[]
  hero           Hero                @relation(fields: [heroId], references: [id])
}

model NewHero {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  heroId       Int             @unique
  heroDetails  HeroDetailsType
  heroImg      String
  heroLaneType String[]
  heroName     String
  heroRoleType String[]
  stats        HeroStats?
  tier         String?
}

type HeroDetailsType {
  heroSpeciality  String[]
  heroAbility     Int
  heroOffense     Int
  heroDurability  Int
  heroDifficulity Int
  heroSkill       HeroSkill[]
}

type HeroSkill {
  skillId            Int
  skillName          String
  skillCooldown      Float?
  skillDescription   String
  skillIconOriginUrl String
  skillTag           SkillTag[]
}

type SkillTag {
  skillTagId   Int
  skillTagName String
  skillTagRGB  Int[]
}

type HeroStats {
  all           Stats
  epic          Stats
  legend        Stats
  mythic        Stats
  mythicalHonor Stats
  mythicalGlory Stats
}

type Stats {
  win String?
  use String?
  ban String?
}

model NewTournamentsData {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  tournamentName String
  dataSourceUrl  String
  data           PickedHero[]
  scrapedAt      DateTime
}

type PickedHero {
  heroName          String
  heroPicks         PickStats
  blueSidePicks     PickStats
  redSidePicks      PickStats
  heroBans          BanStats
  pickAndBans       BanStats
  heroTopPlayedWith HeroPlayStats[]
  heroTopPlayedVs   HeroPlayStats[]
}

type PickStats {
  totalpicks Int?
  total      Int?
  totalWin   Int
  totalLose  Int
  winRate    Json?
  rate       Float?
}

type BanStats {
  total Int
  rate  Float
}

type HeroPlayStats {
  heroName       String
  totalMatchWin  Int
  totalMatchLose Int
}

model MlbbAcc {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accId     String? @unique
  accServer String?
  nickname  String?
  userId    String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  desc          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  followers     String[]  @db.ObjectId
  following     String[]  @db.ObjectId
  links         String[]
  favourite     String[]  @db.ObjectId

  accounts Account[]
  mlbbaccs MlbbAcc[]
  sessions Session[]

  posts    Post[]
  comments Comment[]
  Reply    Reply[]

  @@unique([id, username, image])
  @@unique([id, username])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  createdBy  String
  image      String?
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)
  favourites String[]
  tags       String[]

  user User @relation(fields: [userId, createdBy], references: [id, username], onDelete: Cascade)

  comments Comment[]
  replies  Reply[]
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  userImage  String
  postId     String   @db.ObjectId
  createdBy  String
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)

  user User @relation(fields: [userId, createdBy, userImage], references: [id, username, image], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  replies Reply[]
}

model Reply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  userImage  String
  commentId  String   @db.ObjectId
  postId     String   @db.ObjectId
  createdBy  String
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)

  user    User    @relation(fields: [userId, createdBy, userImage], references: [id, username, image], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

type Field {
  name       String?  @map("name")
  subheading String?  @map("subheading")
  updates    String[]
}

type Heading {
  name   String
  fields Field[]
}

model Patch {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  version  String
  release  String
  intro    String[]
  headings Heading[]
}
