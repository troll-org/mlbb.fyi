//dotenv -e .env.local -- prisma db push
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Field {
  name       String?  @map("name")
  subheading String?  @map("subheading")
  updates    String[]
}

type Heading {
  name   String
  fields Field[]
}

model Patch {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  version  String
  release  String
  intro    String[]
  headings Heading[]
}

model MlbbAcc {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accId     String? @unique
  accServer String?
  nickname  String?
  userId    String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  desc          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  followers     String[]  @db.ObjectId
  following     String[]  @db.ObjectId
  links         String[]
  favourite     String[]  @db.ObjectId

  accounts Account[]
  mlbbaccs MlbbAcc[]
  sessions Session[]

  posts    Post[]
  comments Comment[]
  Reply    Reply[]

  @@unique([id, username, image])
  @@unique([id, username])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  createdBy  String
  image      String?
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)
  favourites String[]
  tags       String[]

  user User @relation(fields: [userId, createdBy], references: [id, username], onDelete: Cascade)

  comments Comment[]
  replies  Reply[]
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  userImage  String
  postId     String   @db.ObjectId
  createdBy  String
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)

  user User @relation(fields: [userId, createdBy, userImage], references: [id, username, image], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  replies Reply[]
}

model Reply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  userImage  String
  commentId  String   @db.ObjectId
  postId     String   @db.ObjectId
  createdBy  String
  likes      String[]
  dislikes   String[]
  totalVotes Int      @default(0)

  user    User    @relation(fields: [userId, createdBy, userImage], references: [id, username, image], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}
